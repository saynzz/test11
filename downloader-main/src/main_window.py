from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import sys
import os
import json
import time
import random
from downloader import VideoDownloader

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å VideoDownloader (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å)
class VideoDownloader:
    def __init__(self):
        self.queue = []
        self.download_dir = os.getcwd()
        self.options = {}
        
    def set_download_dir(self, directory):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤"""
        self.download_dir = directory
        if not os.path.exists(directory):
            os.makedirs(directory)
    
    def set_options(self, options):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–ø—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.options = options
    
    def add_to_queue(self, url):
        """–î–æ–±–∞–≤–ª—è–µ—Ç URL –≤ –æ—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.queue.append(url)
    
    def download(self, url):
        """–ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ"""
        try:
            # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ –∑–∞–≥—Ä—É–∑–∫–∏
            time.sleep(1)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            format_ext = {
                "video+audio": "mp4",
                "video_only": "mp4",
                "audio_only": "mp3"
            }
            ext = format_ext.get(self.options.get('format', 'video+audio'), 'mp4')
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
            filename = f"video_{hash(url) % 10000}.{ext}"
            filepath = os.path.join(self.download_dir, filename)
            
            return {
                'status': 'success',
                'path': filepath,
                'message': 'Download completed successfully'
            }
        except Exception as e:
            return {
                'status': 'error',
                'message': f'Download failed: {str(e)}'
            }

# –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å Reporter (–æ—Å—Ç–∞–≤—å—Ç–µ –∫–∞–∫ –µ—Å—Ç—å)
class Reporter:
    def save_report(self, results):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞–≥—Ä—É–∑–∫–∞—Ö"""
        try:
            report_dir = os.path.join(os.getcwd(), "reports")
            if not os.path.exists(report_dir):
                os.makedirs(report_dir)
            
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            report_file = os.path.join(report_dir, f"report_{timestamp}.txt")
            
            with open(report_file, 'w', encoding='utf-8') as f:
                f.write("=== VIDEO DOWNLOAD REPORT ===\n")
                f.write(f"Generated: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
                f.write("=" * 30 + "\n\n")
                
                success_count = sum(1 for r in results.values() if '‚úÖ' in r)
                total_count = len(results)
                
                f.write(f"Total: {total_count}\n")
                f.write(f"Successful: {success_count}\n")
                f.write(f"Failed: {total_count - success_count}\n\n")
                
                f.write("DETAILS:\n")
                f.write("-" * 20 + "\n")
                
                for url, result in results.items():
                    f.write(f"URL: {url}\n")
                    f.write(f"Result: {result}\n")
                    f.write("-" * 20 + "\n")
            
            return True
        except Exception as e:
            print(f"Error saving report: {e}")
            return False


# –ö–ª–∞—Å—Å DownloadThread –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –î–û MainWindow
class DownloadThread(QThread):
    progress_signal = pyqtSignal(int, int, str, dict)
    result_signal = pyqtSignal(dict)
    
    def __init__(self, downloader):
        super().__init__()
        self.downloader = downloader
    
    def run(self):
        results = {}
        for i, url in enumerate(self.downloader.queue):
            if hasattr(self.downloader, '_stop_flag') and self.downloader._stop_flag:
                break
                
            result = self.downloader.download(url)
            results[url] = result
            self.progress_signal.emit(i, len(self.downloader.queue), url, {})
        
        self.result_signal.emit(results)

# –û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å MainWindow
class MainWindow(QMainWindow):
    def __init__(self):
        super().__init__()
        self.downloader = VideoDownloader()
        self.reporter = Reporter()
        self.current_language = "ru"
        self.dark_theme = True
        self.setup_ui()
        self.setup_translations()
        self.setup_styles()
        self.load_presets()
    
    def setup_ui(self):
        self.setWindowTitle("üî• Ultra Video Downloader PRO")
        self.setGeometry(100, 100, 900, 750)
        
        # –ì–ª–∞–≤–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        main_widget = QWidget()
        self.setCentralWidget(main_widget)
        
        # –û—Å–Ω–æ–≤–Ω–æ–π layout
        layout = QVBoxLayout()
        main_widget.setLayout(layout)
        
        # –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        top_layout = QHBoxLayout()
        
        # –í—ã–±–æ—Ä —è–∑—ã–∫–∞
        self.language_combo = QComboBox()
        self.language_combo.addItems(["üá∑üá∫ –†—É—Å—Å–∫–∏–π", "üá∫üá∏ English"])
        self.language_combo.currentIndexChanged.connect(self.change_language)
        
        # –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
        self.theme_btn = QPushButton("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞")
        self.theme_btn.clicked.connect(self.toggle_theme)
        
        top_layout.addWidget(QLabel("–Ø–∑—ã–∫:"))
        top_layout.addWidget(self.language_combo)
        top_layout.addStretch()
        top_layout.addWidget(self.theme_btn)
        
        layout.addLayout(top_layout)
        
        # –®–∞–ø–∫–∞
        self.header = QLabel("ULTRA VIDEO DOWNLOADER")
        self.header.setAlignment(Qt.AlignCenter)
        layout.addWidget(self.header)
        
        # –ë–ª–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_group = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏")
        settings_layout = QGridLayout()
        
        # –í—ã–±–æ—Ä –ø–∞–ø–∫–∏
        self.folder_input = QLineEdit(os.getcwd())
        self.browse_btn = QPushButton("–û–±–∑–æ—Ä...")
        self.browse_btn.clicked.connect(self.select_folder)
        
        # –ü—Ä–µ—Å–µ—Ç—ã –∫–∞—á–µ—Å—Ç–≤–∞ (–¥–æ–±–∞–≤–ª–µ–Ω 2160p)
        self.quality_combo = QComboBox()
        self.quality_combo.addItems(["2160p (–º–∞–∫—Å)", "1440p", "1080p", "720p", "480p", "360p", "240p", "144p"])
        
        # –§–æ—Ä–º–∞—Ç—ã (—É–±—Ä–∞–Ω–∞ –æ–ø—Ü–∏—è "–¢–æ–ª—å–∫–æ –∑–≤—É–∫")
        self.format_combo = QComboBox()
        self.format_combo.addItems(["–í–∏–¥–µ–æ+–ó–≤—É–∫", "–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ"])
        
        # –í–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏ –∏ VPN
        self.watermark_check = QCheckBox("–£–¥–∞–ª—è—Ç—å –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏")
        self.vpn_check = QCheckBox("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN")
        
        # –ü—Ä–µ—Å–µ—Ç—ã
        self.preset_combo = QComboBox()
        self.preset_combo.addItem("–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é")
        self.preset_combo.currentTextChanged.connect(self.load_selected_preset)
        self.save_preset_btn = QPushButton("üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç")
        self.save_preset_btn.clicked.connect(self.save_preset)
        self.save_watermark_btn = QPushButton("üíß –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º")
        self.save_watermark_btn.clicked.connect(self.save_with_watermark)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        settings_layout.addWidget(QLabel("–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:"), 0, 0)
        settings_layout.addWidget(self.folder_input, 0, 1)
        settings_layout.addWidget(self.browse_btn, 0, 2)
        settings_layout.addWidget(QLabel("–ö–∞—á–µ—Å—Ç–≤–æ:"), 1, 0)
        settings_layout.addWidget(self.quality_combo, 1, 1)
        settings_layout.addWidget(QLabel("–§–æ—Ä–º–∞—Ç:"), 2, 0)
        settings_layout.addWidget(self.format_combo, 2, 1)
        settings_layout.addWidget(self.watermark_check, 3, 0, 1, 2)
        settings_layout.addWidget(self.vpn_check, 4, 0, 1, 2)
        settings_layout.addWidget(QLabel("–ü—Ä–µ—Å–µ—Ç—ã:"), 5, 0)
        settings_layout.addWidget(self.preset_combo, 5, 1)
        settings_layout.addWidget(self.save_preset_btn, 5, 2)
        settings_layout.addWidget(self.save_watermark_btn, 6, 0, 1, 3)
        
        self.settings_group.setLayout(settings_layout)
        layout.addWidget(self.settings_group)
        
        # –ë–ª–æ–∫ –∑–∞–≥—Ä—É–∑–∫–∏
        self.url_input = QLineEdit()
        self.url_input.setPlaceholderText("‚úèÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ...")
        
        btn_layout = QHBoxLayout()
        self.add_btn = QPushButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å")
        self.add_btn.clicked.connect(self.add_url)
        self.download_btn = QPushButton("‚è¨ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É")
        self.download_btn.clicked.connect(self.start_download)
        self.extract_audio_btn = QPushButton("üéµ –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫")
        self.extract_audio_btn.clicked.connect(self.extract_audio)
        
        btn_layout.addWidget(self.add_btn)
        btn_layout.addWidget(self.download_btn)
        btn_layout.addWidget(self.extract_audio_btn)
        
        # –ü—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
        self.progress = QProgressBar()
        self.progress.setVisible(False)
        
        # –õ–æ–≥ –¥–µ–π—Å—Ç–≤–∏–π
        self.log_area = QTextEdit()
        self.log_area.setReadOnly(True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        layout.addWidget(self.url_input)
        layout.addLayout(btn_layout)
        layout.addWidget(self.progress)
        layout.addWidget(self.log_area)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = self.statusBar()
        self.update_status("üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
    
    def setup_translations(self):
        self.translations = {
            "ru": {
                "header": "ULTRA VIDEO DOWNLOADER",
                "settings": "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏",
                "folder": "–ü–∞–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:",
                "browse": "–û–±–∑–æ—Ä...",
                "quality": "–ö–∞—á–µ—Å—Ç–≤–æ:",
                "format": "–§–æ—Ä–º–∞—Ç:",
                "watermark": "–£–¥–∞–ª—è—Ç—å –≤–æ–¥—è–Ω—ã–µ –∑–Ω–∞–∫–∏",
                "vpn": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å VPN",
                "presets": "–ü—Ä–µ—Å–µ—Ç—ã:",
                "save_preset": "üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç",
                "save_watermark": "üíß –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º",
                "placeholder": "‚úèÔ∏è –í—Å—Ç–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ...",
                "add": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –æ—á–µ—Ä–µ–¥—å",
                "download": "‚è¨ –ù–∞—á–∞—Ç—å –∑–∞–≥—Ä—É–∑–∫—É",
                "extract_audio": "üéµ –ò–∑–≤–ª–µ—á—å –∑–≤—É–∫",
                "ready": "üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
                "theme_btn": "üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞",
                "language": "–Ø–∑—ã–∫:"
            },
            "en": {
                "header": "ULTRA VIDEO DOWNLOADER",
                "settings": "‚öôÔ∏è Download Settings",
                "folder": "Save folder:",
                "browse": "Browse...",
                "quality": "Quality:",
                "format": "Format:",
                "watermark": "Remove watermarks",
                "vpn": "Use VPN",
                "presets": "Presets:",
                "save_preset": "üíæ Save preset",
                "save_watermark": "üíß Save with watermark",
                "placeholder": "‚úèÔ∏è Paste video link...",
                "add": "‚ûï Add to queue",
                "download": "‚è¨ Start download",
                "extract_audio": "üéµ Extract audio",
                "ready": "üü¢ Ready to work",
                "theme_btn": "üåô Dark theme",
                "language": "Language:"
            }
        }
    
    def change_language(self):
        if self.language_combo.currentText() == "üá∫üá∏ English":
            self.current_language = "en"
        else:
            self.current_language = "ru"
        
        self.translate_ui()
    
    def translate_ui(self):
        trans = self.translations[self.current_language]
        
        self.header.setText(trans["header"])
        self.settings_group.setTitle(trans["settings"])
        self.settings_group.layout().itemAtPosition(0, 0).widget().setText(trans["folder"])
        self.browse_btn.setText(trans["browse"])
        self.settings_group.layout().itemAtPosition(1, 0).widget().setText(trans["quality"])
        self.settings_group.layout().itemAtPosition(2, 0).widget().setText(trans["format"])
        self.watermark_check.setText(trans["watermark"])
        self.vpn_check.setText(trans["vpn"])
        self.settings_group.layout().itemAtPosition(5, 0).widget().setText(trans["presets"])
        self.save_preset_btn.setText(trans["save_preset"])
        self.save_watermark_btn.setText(trans["save_watermark"])
        self.url_input.setPlaceholderText(trans["placeholder"])
        self.add_btn.setText(trans["add"])
        self.download_btn.setText(trans["download"])
        self.extract_audio_btn.setText(trans["extract_audio"])
        self.theme_btn.setText("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞" if self.current_language == "ru" else "üåô Dark theme")
        self.update_status(trans["ready"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –≤ layout
        top_layout = self.centralWidget().layout().itemAt(0).layout()
        top_layout.itemAt(0).widget().setText(trans["language"])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —è–∑—ã–∫–∞
        self.update_header_style()
    
    def toggle_theme(self):
        self.dark_theme = not self.dark_theme
        self.setup_styles()
        
        if self.dark_theme:
            self.theme_btn.setText("üåô –¢–µ–º–Ω–∞—è —Ç–µ–º–∞" if self.current_language == "ru" else "üåô Dark theme")
        else:
            self.theme_btn.setText("‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è —Ç–µ–º–∞" if self.current_language == "ru" else "‚òÄÔ∏è Light theme")
    
    def update_header_style(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–º—ã"""
        if self.dark_theme:
            self.header.setStyleSheet("font-size: 20px; font-weight: bold; color: #ffffff;")
        else:
            self.header.setStyleSheet("font-size: 20px; font-weight: bold; color: #000000;")
    
    def setup_styles(self):
        if self.dark_theme:
            self.setStyleSheet("""
                QMainWindow {
                    background-color: #1e1e2e;
                }
                QLabel, QGroupBox {
                    color: #ffffff;
                    font-size: 14px;
                }
                QGroupBox {
                    border: 2px solid #4cc9f0;
                    border-radius: 5px;
                    margin-top: 10px;
                    background-color: #252526;
                    padding-top: 10px;
                }
                QGroupBox::title {
                    subcontrol-origin: margin;
                    left: 10px;
                    padding: 0 5px 0 5px;
                    color: #4cc9f0;
                }
                QPushButton {
                    background-color: #4361ee;
                    color: white;
                    border: none;
                    padding: 8px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #4895ef;
                }
                QPushButton:pressed {
                    background-color: #3a0ca3;
                }
                QLineEdit, QTextEdit, QComboBox {
                    background-color: #252526;
                    color: white;
                    border: 1px solid #4cc9f0;
                    border-radius: 3px;
                    padding: 5px;
                }
                QComboBox QAbstractItemView {
                    background-color: #252526;
                    color: white;
                    selection-background-color: #4361ee;
                    selection-color: white;
                }
                QProgressBar {
                    border: 1px solid #4cc9f0;
                    border-radius: 3px;
                    text-align: center;
                    color: white;
                    background-color: #252526;
                }
                QProgressBar::chunk {
                    background-color: #f72585;
                }
                QCheckBox {
                    color: #ffffff;
                    spacing: 5px;
                }
                QCheckBox::indicator {
                    width: 16px;
                    height: 16px;
                }
                QCheckBox::indicator:checked {
                    background-color: #4361ee;
                    border: 1px solid #4cc9f0;
                }
                QTextEdit {
                    background-color: #1a1a2e;
                    color: #00ff88;
                    font-family: 'Courier New';
                    font-size: 12px;
                }
            """)
        else:
            self.setStyleSheet("""
                QMainWindow {
                    background-color: #f5f5f5;
                }
                QLabel, QGroupBox {
                    color: #333333;
                    font-size: 14px;
                }
                QGroupBox {
                    border: 2px solid #007acc;
                    border-radius: 5px;
                    margin-top: 10px;
                    background-color: #ffffff;
                    padding-top: 10px;
                }
                QGroupBox::title {
                    subcontrol-origin: margin;
                    left: 10px;
                    padding: 0 5px 0 5px;
                    color: #007acc;
                }
                QPushButton {
                    background-color: #007acc;
                    color: white;
                    border: none;
                    padding: 8px;
                    border-radius: 5px;
                    font-weight: bold;
                }
                QPushButton:hover {
                    background-color: #1e90ff;
                }
                QPushButton:pressed {
                    background-color: #005a9e;
                }
                QLineEdit, QTextEdit, QComboBox {
                    background-color: #ffffff;
                    color: #333333;
                    border: 1px solid #cccccc;
                    border-radius: 3px;
                    padding: 5px;
                }
                QComboBox QAbstractItemView {
                    background-color: #ffffff;
                    color: #333333;
                    selection-background-color: #007acc;
                    selection-color: white;
                }
                QProgressBar {
                    border: 1px solid #cccccc;
                    border-radius: 3px;
                    text-align: center;
                    color: #333333;
                    background-color: #ffffff;
                }
                QProgressBar::chunk {
                    background-color: #007acc;
                }
                QCheckBox {
                    color: #333333;
                    spacing: 5px;
                }
                QCheckBox::indicator {
                    width: 16px;
                    height: 16px;
                }
                QCheckBox::indicator:checked {
                    background-color: #007acc;
                    border: 1px solid #005a9e;
                }
                QTextEdit {
                    background-color: #ffffff;
                    color: #008000;
                    font-family: 'Courier New';
                    font-size: 12px;
                    border: 1px solid #cccccc;
                }
            """)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∏–ª—å –∑–∞–≥–æ–ª–æ–≤–∫–∞
        self.update_header_style()
    
    def load_presets(self):
        try:
            presets_file = os.path.join(os.path.dirname(__file__), 'presets.json')
            if os.path.exists(presets_file):
                with open(presets_file, 'r', encoding='utf-8') as f:
                    presets = json.load(f)
                    self.preset_combo.addItems(presets.keys())
        except Exception as e:
            self.log_area.append(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–æ–≤: {str(e)}")
    
    def save_preset(self):
        name, ok = QInputDialog.getText(self, 
            '–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞' if self.current_language == 'ru' else 'Save preset',
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ—Å–µ—Ç–∞:' if self.current_language == 'ru' else 'Enter preset name:')
        
        if ok and name:
            preset = {
                'quality': self.quality_combo.currentText(),
                'format': self.format_combo.currentText(),
                'watermark': self.watermark_check.isChecked(),
                'vpn': self.vpn_check.isChecked()
            }
            
            try:
                presets_file = os.path.join(os.path.dirname(__file__), 'presets.json')
                if os.path.exists(presets_file):
                    with open(presets_file, 'r', encoding='utf-8') as f:
                        presets = json.load(f)
                else:
                    presets = {}
                    
                presets[name] = preset
                
                with open(presets_file, 'w', encoding='utf-8') as f:
                    json.dump(presets, f, ensure_ascii=False, indent=2)
                
                self.preset_combo.clear()
                self.preset_combo.addItems(["–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é"] + list(presets.keys()))
                self.log_area.append(f"üíæ –ü—Ä–µ—Å–µ—Ç '{name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
                
            except Exception as e:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø—Ä–µ—Å–µ—Ç: {str(e)}")

    def load_selected_preset(self, preset_name):
        if preset_name == "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é":
            return
            
        try:
            presets_file = os.path.join(os.path.dirname(__file__), 'presets.json')
            if os.path.exists(presets_file):
                with open(presets_file, 'r', encoding='utf-8') as f:
                    presets = json.load(f)
                    
                if preset_name in presets:
                    preset = presets[preset_name]
                    self.quality_combo.setCurrentText(preset['quality'])
                    self.format_combo.setCurrentText(preset['format'])
                    self.watermark_check.setChecked(preset['watermark'])
                    self.vpn_check.setChecked(preset['vpn'])
                    
                    self.log_area.append(f"üìÇ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—Ä–µ—Å–µ—Ç: {preset_name}")
        except Exception as e:
            self.log_area.append(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–µ—Å–µ—Ç–∞: {str(e)}")
    
    def save_with_watermark(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤–∏–¥–µ–æ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º"""
        self.watermark_check.setChecked(False)
        self.log_area.append("üíß –†–µ–∂–∏–º: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å –≤–æ–¥—è–Ω—ã–º –∑–Ω–∞–∫–æ–º")
    
    def select_folder(self):
        folder = QFileDialog.getExistingDirectory(self, 
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è" if self.current_language == 'ru' else "Select save folder")
        if folder:
            self.folder_input.setText(folder)
            self.downloader.set_download_dir(folder)
    
    def add_url(self):
        url = self.url_input.text().strip()
        if url:
            self.downloader.add_to_queue(url)
            self.log_area.append(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å: {url}")
            self.url_input.clear()
            self.update_status(f"üì• –í –æ—á–µ—Ä–µ–¥–∏: {len(self.downloader.queue)} –≤–∏–¥–µ–æ")
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ" if self.current_language == 'ru' else "Please enter video URL")
    
    def extract_audio(self):
        url = self.url_input.text().strip()
        if url:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ—Ä–º–∞—Ç "audio_only" –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–≤—É–∫–∞
            options = {
                'quality': self.quality_combo.currentText().split(' ')[0],
                'format': 'audio_only',
                'watermark': self.watermark_check.isChecked(),
                'vpn': self.vpn_check.isChecked(),
                'output_dir': self.folder_input.text()
            }
            self.downloader.set_options(options)
            
            self.downloader.add_to_queue(url)
            self.log_area.append(f"üéµ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–≤—É–∫–∞: {url}")
            self.url_input.clear()
            self.update_status(f"üì• –í –æ—á–µ—Ä–µ–¥–∏: {len(self.downloader.queue)} –∞—É–¥–∏–æ")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∑–≤—É–∫–∞
            self.start_download()
        else:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –≤–∏–¥–µ–æ" if self.current_language == 'ru' else "Please enter video URL")
    
    def start_download(self):
        if not self.downloader.queue:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", 
                "–û—á–µ—Ä–µ–¥—å –∑–∞–≥—Ä—É–∑–∫–∏ –ø—É—Å—Ç–∞" if self.current_language == 'ru' else "Download queue is empty")
            return
            
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏
        options = {
            'quality': self.quality_combo.currentText().split(' ')[0],
            'format': self._get_format_key(),
            'watermark': self.watermark_check.isChecked(),
            'vpn': self.vpn_check.isChecked(),
            'output_dir': self.folder_input.text()
        }
        
        self.downloader.set_options(options)
        self.downloader.set_download_dir(self.folder_input.text())
        
        self.progress.setMaximum(len(self.downloader.queue))
        self.progress.setValue(0)
        self.progress.setVisible(True)
        
        self.log_area.append("\nüöÄ –ù–∞—á–∏–Ω–∞—é –∑–∞–≥—Ä—É–∑–∫—É..." if self.current_language == 'ru' else "\nüöÄ Starting download...")
        QApplication.processEvents()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.download_thread = DownloadThread(self.downloader)
        self.download_thread.progress_signal.connect(self.update_progress)
        self.download_thread.result_signal.connect(self.handle_download_result)
        self.download_thread.start()
    
    def update_progress(self, index, total, url, progress_data):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.progress.setValue(index + 1)
        self.log_area.append(f"{index+1}/{total}. –ó–∞–≥—Ä—É–∑–∫–∞: {url}")
    
    def handle_download_result(self, results):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–≥—Ä—É–∑–∫–∏"""
        self.progress.setVisible(False)
        
        success_count = sum(1 for r in results.values() if r.get('status') == 'success')
        total_count = len(results)
        
        for url, result in results.items():
            if result.get('status') == 'success':
                self.log_area.append(f"‚úÖ {url} - –£—Å–ø–µ—à–Ω–æ: {result.get('path', '')}")
            else:
                self.log_area.append(f"‚ùå {url} - –û—à–∏–±–∫–∞: {result.get('message', '')}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
        try:
            self.reporter.save_report(results)
            self.log_area.append("üìä –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω" if self.current_language == 'ru' else "üìä Report saved")
        except Exception as e:
            self.log_area.append(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞: {str(e)}")
        
        self.downloader.queue.clear()
        
        msg = QMessageBox()
        msg.setWindowTitle("üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ!" if self.current_language == 'ru' else "üéâ Completed!")
        msg.setText(f"–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n–£—Å–ø–µ—à–Ω–æ: {success_count}/{total_count}" if self.current_language == 'ru' else f"Download completed!\nSuccessful: {success_count}/{total_count}")
        msg.exec_()
        
        self.update_status("üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ" if self.current_language == 'ru' else "üü¢ Ready to work")
    
    def _get_format_key(self):
        """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Ä—É—Å—Å–∫–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–æ—Ä–º–∞—Ç–æ–≤ –≤ –∫–ª—é—á–∏"""
        format_map = {
            "–í–∏–¥–µ–æ+–ó–≤—É–∫": "video+audio",
            "–¢–æ–ª—å–∫–æ –≤–∏–¥–µ–æ": "video_only"
        }
        return format_map.get(self.format_combo.currentText(), "video+audio")
    
    def update_status(self, message):
        self.status_bar.showMessage(message)

def run_gui():
    app = QApplication(sys.argv)
    app.setStyle('Fusion')
    
    window = MainWindow()
    window.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    run_gui()